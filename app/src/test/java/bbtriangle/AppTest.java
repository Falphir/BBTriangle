/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bbtriangle;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import triangle.Triangle;


import static org.junit.jupiter.api.Assertions.*;

public class AppTest {

    @Test
    @DisplayName("Triangle Side Length 10,5,7")
    void getTriangleLength() {
        Triangle triangle = new Triangle(10, 5, 7);
        assertEquals("10,5,7",triangle.getSideLengths(), "Triangle Side Length should be 10,5,7");
    }

    @Test
    @DisplayName("Triangle Perimeter 10 + 5 + 7 = 22")
    void calculateTrianglePerimeter() {
        Triangle triangle = new Triangle(10, 5, 7);
        assertEquals(22,triangle.getPerimeter(), "10 + 5 + 7 = 22");
    }

    @Test
    @DisplayName("Classify Triangles")
    void checkTriangleClassify() {
        Triangle triangle1 = new Triangle(-1, 5, 7);
        assertEquals("impossible",triangle1.classify(), "Triangle with Side Length -1, 5, 7 shouldn't be a valid triangle resulting in impossible");

        Triangle triangle2 = new Triangle(5, 5, 5);
        assertEquals("equilateral",triangle2.classify(), "5 == 5 == 5 = equilateral triangle");

        Triangle triangle3 = new Triangle(5, 5, 7);
        assertEquals("isossceles",triangle3.classify(), "5 == 5 != 7 = isossceles triangle");

        Triangle triangle4 = new Triangle(5, 4, 3);
        assertEquals("right-angled",triangle4.classify(), "5 * 5 == (4*4 + 3*3 = Right Angled triangle");

        Triangle triangle5 = new Triangle(2, 3, 6);
        assertEquals("scalene",triangle5.classify(), " 2 != 3 != 6 = scalene triangle");
    }

    @Test
    @DisplayName("Calculate Triangle Area")
    void testCalculateTriangleArea() {
        Triangle triangle = new Triangle(3, 3, 3);
        assertEquals(2.0,triangle.getArea(), "sqrt((9/2)*(9/2-3)*(9/2-3)*(9/2-3)) = 2.0");
    }

    @Test
    @DisplayName("Is Triangle Impossible")
    void testIsTriangleImpossible() {
        Triangle triangle = new Triangle(-1, 5, 7);
        assertTrue(triangle.isImpossible(), "Triangle with Side Length -1, 5, 7 shouldn't be a valid triangle resulting in impossible");
    }

    @Test
    @DisplayName("Is Triangle Equilateral")
    void testIsTriangleValidEquilateral() {
        Triangle triangle = new Triangle(5, 5, 5);
        assertTrue(triangle.isEquilateral(), "5 == 5 == 5 = equilateral triangle");
    }

    @Test
    @DisplayName("Is Triangle Isossceles")
    void testIsTriangleValidIsossceles() {
        Triangle triangle = new Triangle(5, 5, 7);
        assertTrue(triangle.isIsosceles(), "5 == 5 != 7 = isossceles triangle");
    }

    @Test
    @DisplayName("Is Triangle Scalene")
    void testIsTriangleValidScalene() {
        Triangle triangle = new Triangle(2, 3, 6);
        assertTrue(triangle.isScalene(), " 2!= 3!= 6 = scalene triangle");
    }


    @Test
    @DisplayName("Is Triangle Right Angled")
    void testIsTriangleValidIsRightAngled() {
        Triangle triangle = new Triangle(5, 4, 3);
        assertTrue(triangle.isRightAngled(), "5 * 5 == (4*4 + 3*3 = Right Angled triangle");
    }

}
